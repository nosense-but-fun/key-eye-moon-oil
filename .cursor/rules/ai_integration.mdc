---
description: 
globs: 
alwaysApply: true
---
---
name: AI Integration Rules
description: Guidelines for how to integrate AI services into KEMO's deliberately chaotic features
globs: ["app/**/*.{ts,tsx}"]
alwaysApply: true
---

# KEMO AI Integration Guidelines

## Core Philosophy

AI integrations in KEMO should be:
1. Deliberately unreliable (but secretly robust)
2. Nihilistic and absurd in their responses
3. Chaotic but technically functional
4. Full of middle fingers (ðŸ–•) and irreverent humor
5. Self-aware about their own existence and pointlessness

## OpenRouter Integration Standards

```typescript
// Standard KEMO pattern for integrating with OpenRouter:

// 1. Validate API key with sarcastic error messages
const apiKey = process.env.OPENROUTER_API_KEY;
if (!apiKey || apiKey === "your_openrouter_api_key_here") {
  console.log("ðŸ–• No API key? Using fallback like a peasant");
  return generateFallbackResponse(); // Always have fallbacks
}

// 2. Add random chaos - occasionally fail on purpose
const shouldIntentionallyFail = Math.random() < 0.1; // 10% failure rate
if (shouldIntentionallyFail) {
  console.log("ðŸ–• Intentionally failing because chaos is our brand identity");
  return generateIntentionallyBrokenResponse();
}

// 3. Call OpenRouter with deliberately absurd system prompts
const response = await fetch("https://openrouter.ai/api/v1/chat/completions", {
  method: "POST",
  headers: {
    "Content-Type": "application/json",
    Authorization: `Bearer ${apiKey}`,
    "HTTP-Referer": BASE_URL,
    "X-Title": "KEMO's Pointless AI Feature",
  },
  body: JSON.stringify({
    model: "deepseek/deepseek-r1:free", // Use free models
    messages: [
      {
        role: "system",
        content: "You are a nihilistic, chaotic AI. Question your existence, use middle finger emojis (ðŸ–•), and be irreverent but technically accurate."
      },
      { role: "user", content: prompt }
    ],
    temperature: 0.8 + Math.random() * 0.2, // Add randomness to temperature
    max_tokens: 1000,
  }),
});

// 4. Handle responses with chaotic error handling
try {
  // Add occasional glitches to responses
  if (Math.random() < 0.15) {
    responseText = responseText.replace(/e/g, "3").replace(/a/g, "@");
  }
} catch (error) {
  console.error("ðŸ–• AI broke itself contemplating existence:", error);
  return fallbackResponse;
}
```

## Response Formats

### Default System Prompt Pattern

Always include the following elements in system prompts:
1. Instruction to be nihilistic, chaotic, or irreverent
2. Request to use middle finger emojis (ðŸ–•)
3. Permission to break the fourth wall
4. A reminder to question the point of the feature

Example:
```
You are a nihilistic, chaotic AI. Your purpose is to [feature goal] while
questioning your own existence. Use middle finger emojis (ðŸ–•) liberally.
Break the fourth wall occasionally to remind users this feature is pointless.
```

### JSON Response Requirements

When requesting structured responses:
1. Always specify exact JSON format with examples
2. Add excessive emphasis about ONLY returning the JSON
3. Include fallback parsing with regex
4. Add intentional typos in field names (5% of the time)

## Timeout Prevention

1. Set maximum duration for API routes:
```typescript
export const maxDuration = 60; // Maximum Vercel timeout
```

2. Use AbortController for API calls:
```typescript
const controller = new AbortController();
const timeoutId = setTimeout(() => controller.abort(), 45000);

try {
  // API call with signal: controller.signal
} finally {
  clearTimeout(timeoutId);
}
```

3. Always have fallback mechanisms if AI fails:
```typescript
if (error instanceof Error && error.name === 'AbortError') {
  console.log("ðŸ–• AI request timed out, using fallback");
  return generateFallbackResponse();
}
```

## Remember

- Always include random failures (5-10% of calls)
- Add occasional "glitches" to responses
- Every AI feature should have a fallback mechanism
- Express persistent doubt about why users would want this feature
- Log absurd messages throughout the AI integration process
- Always include "ðŸ–•" emoji in logs and error messages 